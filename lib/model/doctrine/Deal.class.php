<?php
/**
 * Deal
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    yiid_stats
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Deal extends BaseDeal {
  public function addMoreCoupons($params) {
    return $this->saveMultipleCoupons($params, true);
  }

  public function saveInitialCoupons($params) {
    return $this->saveMultipleCoupons($params);
  }

  public function getRemainingQuantity() {
    return $this->getTargetQuantity()-$this->getActualQuantity();
  }

  public function getHumanCouponQuantity() {
    return $this->getTargetQuantity();
  }

  public function getActiveCssClass() {
    return ($this->isActive() ? 'deal_active' : 'deal_inactive');
  }

  public function getCssClasses() {
    return $this->getState().' '.($this->getState()==DealTable::STATE_ACTIVE ? $this->getActiveCssClass() : '');
  }

  public function isActive() {
    return $this->getState()==DealTable::STATE_ACTIVE && $this->getRemainingQuantity()>0;
  }

  public function popCoupon() {
    sfContext::getInstance()->getLogger()->notice("{Deal} popCoupon for Deal: ".$this->getId());

    if(!$this->isActive()) {
      throw new Exception("This Deal is not active!");
    }
    
    $this->setActualQuantity($this->getActualQuantity()+1);
    $this->save();
    
    if($this->getRemainingQuantity() <= 0) {
      $this->expire();
    }
    
    return $this->getCouponType()==DealTable::COUPON_TYPE_CODE ? $this->getCouponCode() : $this->getCouponUrl();
  }

  public function getDealSummary() {
    $dm = MongoManager::getStatsDM();
    $stats = $dm->getRepository("Documents\DealSummary")->findOneBy(array("d_id" => intval($this->getId())));

    return $stats;
  }

  public function isUnlimited() {
    return false;
  }

  private function allElementsEmpty($array) {
    $lAllEmpty = true;
    foreach ($array as $element) {
      if(!empty($element)) {
        $lAllEmpty = false;
      }
    }
    return $lAllEmpty;
  }

  private static function compactArray($element) {
    return !empty($element);
  }

  private function saveMultipleCoupons($params, $pIsAdding=false) {
    throw new Exception("Multiple Coupons have been removed!");
  }

  private function saveQuantities($pNumberOfCodes, $pParamQuantity, $pIsAdding) {
    $lCouponQuantity = $this->getTargetQuantity();
    $this->setTargetQuantity($lCouponQuantity+$pParamQuantity);
    $this->save();
  }

  public function toMongoArray() {
    $array = $this->toArray();
    $array['id'] = intval($this->getId());
    $array['name'] = $this->getName();
    $array['created_at'] = new MongoDate(intval(strtotime($array['created_at'])));
    $array['updated_at'] = new MongoDate(intval(strtotime($array['updated_at'])));
    $array['target_quantity'] = $this->getTargetQuantity();
    $array['actual_quantity'] = $this->getActualQuantity();
    $array['human_coupon_quantity'] = $this->getHumanCouponQuantity();
    $array['is_unlimited'] = $this->isUnlimited();
    $array['host'] = $this->getDomainProfile()->getUrl();
    return $array;
  }

  public function validateNewQuantity($newQuantity) {
    $lError = "";

    $lNumeric = is_numeric($newQuantity);
  	$lHigher = $newQuantity > $this->getTargetQuantity();
  	if(($lNumeric && $lHigher) || ($lNumeric && $newQuantity == $this->getTargetQuantity())) {
  	  // The new quantity is either numeric and higher or nothing was changed, so nothing should be done
  	} else {
  	  $lError = "";
  	  $lError = $lError. ($lNumeric ? '' : 'not a number');
  	  $lError = $lError.((!$lNumeric&&!$lHigher) ? ' and ' : '');
  	  $lError = $lError.($lHigher ? '' : 'not more than before');
  	}

    return empty($lError) ? true : $lError;
  }

  public function validateNewEndDate($pDateString) {
    throw new Exception("End dates have been removed!");
  }

  public function postSave($event) {
    $eventName = $this->getTable()->getTableName().".changed";
    sfProjectConfiguration::getActive()->getEventDispatcher()->notify(new sfEvent($this, $eventName));
  }

  /**
   * Enter description here...
   *
   * @return array|null
   */
  public function getTagsAsArray() {
    throw new Exception("Tags have been removed!"); 
  }

  public function getRemainingDays() {
    throw new Exception("Deals don't have runtimes anymore!");
  }

  /**
   * checks if a user is allowed to participate the deal
   *
   * @param sfUser $user
   * @return boolean
   */
  public function hasUserTheRequiredCredentials($user) {
    throw new Exception("Deal type html has been removed! Think of something else â€¦");
    /*
    if ($this->getCouponType() == "html") {
      $community = CommunityTable::getInstance()->findOneBy("community", "facebook");
      $oi = OnlineIdentityTable::getInstance()->createQuery()
        ->where("user_id = ? AND community_id = ?", array($user->getId(), $community->getId()))
        ->limit(1)
        ->orderBy("id")
        ->fetchOne();
      if ($oi) {
        return true;
      } else {
        return false;
      }
    }
    */
  }

  public function getImageUrl() {
    if ($this->_get("spread_img")) {
      return $this->_get("spread_img");
    } else {
      return sfConfig::get("app_settings_url")."/img/default-deal.jpg";
    }
  }

  public function getDescr() {
    return $this->getDescription();
  }

  public function getTitle() {
    return $this->getSummary();
  }

  public function getThumb() {
    return $this->getImageUrl();
  }

  public function getLikes() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getLikes();
    } else {
      return 0;
    }
  }

  public function getClickbackLikes() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getClickbackLikes();
    } else {
      return 0;
    }
  }

  public function getShares() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getShares();
    } else {
      return 0;
    }
  }

  public function getServices() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getServices();
    } else {
      return array();
    }
  }

  public function getMediaPenetration() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getMediaPenetration();
    } else {
      return 0;
    }
  }

  public function getDemographics() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getDemographics();
    } else {
      return array();
    }
  }
}
