<?php
/**
 * Deal
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    yiid_stats
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Deal extends BaseDeal {

  public function getRemainingQuantity() {
    return $this->getTargetQuantity()-$this->getActualQuantity();
  }

  public function isActive() {
    return $this->getState()==DealTable::STATE_ACTIVE && $this->getRemainingQuantity()>0;
  }

  public function participate($user) {
    sfContext::getInstance()->getLogger()->notice("{Deal} participate for Deal: ".$this->getId());

    if(!$this->isActive()) {
      throw new sfException("This Deal is not active!");
    }

    if($user->getParticipatedDeals() && in_array($this->getId(), $user->getParticipatedDeals())) {
      throw new sfException("User has already participated in this deal!");
    }

    $array = $user->getParticipatedDeals() ? $user->getParticipatedDeals() : array();
    $array[] = $this->getId();
    $user->setParticipatedDeals($array);
    $user->save();

    // check participation type
    if ($this->getBillingType() == "like") { // count likes
      $this->setActualQuantity($this->getActualQuantity()+1);
    } else { // count media penetration
      $dm = MongoManager::getStatsDM();
      $analyticsActivity = $dm->getRepository("Documents\AnalyticsActivity")->findOneBy(array("d_id" => intval($this->getId()), "u_id" => intval($user->getId())));

      $this->setActualQuantity($this->getActualQuantity()+$analyticsActivity->getMediaPenetration());
    }

    $this->save();

    if($this->getRemainingQuantity() <= 0) {
      $this->expire();
      // send deal expire event
      sfContext::getInstance()->getEventDispatcher()->notify(new sfEvent($this, 'deal.expire', array()));
    }

    return $this->getCouponType()==DealTable::COUPON_TYPE_CODE ? $this->getCouponCode() : $this->getCouponUrl();
  }

  public function getDealSummary() {
    $dm = MongoManager::getStatsDM();
    $stats = $dm->getRepository("Documents\DealSummary")->findOneBy(array("d_id" => intval($this->getId())));

    return $stats;
  }


  public function getImageUrl() {
    if ($this->_get("spread_img")) {
      return $this->_get("spread_img");
    } else {
      return sfConfig::get("app_settings_url")."/img/default-deal.jpg";
    }
  }

  public function getDescr() {
    return $this->getDescription();
  }

  public function getTitle() {
    return $this->getSummary();
  }

  public function getThumb() {
    return $this->getImageUrl();
  }

  public function getLikes() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getLikes();
    } else {
      return 0;
    }
  }

  public function getClickbackLikes() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getClickbackLikes();
    } else {
      return 0;
    }
  }

  public function getClickbacks() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getClickbacks();
    } else {
      return 0;
    }
  }

  public function getShares() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getShares();
    } else {
      return 0;
    }
  }

  public function getServices() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getServices();
    } else {
      return array();
    }
  }

  public function getMediaPenetration() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getMediaPenetration();
    } else {
      return 0;
    }
  }

  public function getDemographics() {
    $dealSummary = $this->getDealSummary();

    if ($dealSummary) {
      return $dealSummary->getDemographics();
    } else {
      return array();
    }
  }

  public function toYiidActivityArray() {
    $array = array();

    $array['title'] = $this->getSpreadTitle();
    $array['descr'] = $this->getSpreadText();
    $array['thumb'] = $this->getSpreadImg();
    $array['url'] = $this->getSpreadUrl();

    return $array;
  }
}
