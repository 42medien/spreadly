<?xml version="1.0"?>
<project name="Yiid.it" default="info" basedir=".">

  <!-- give some info about this tool -->
  <target name="info">
    <echo>Available Tasks:
    - builddev
    - buildlocal
    - buildlive
    - buildci
    - buildwidget
    - test
    - lockdb
    - I18NSync
    - buildjs
    - buildcss
   </echo>
  </target>


  <fileset dir="./data/deployment/frontend_controllers" id="frontend_controllers">
    <include name="**" />
  </fileset>

  <fileset dir="./data/deployment/widget_controllers" id="widget_controllers">
    <include name="**" />
  </fileset>

  <fileset dir="./data/deployment/local_config" id="local_config">
    <include name="**" />
  </fileset>
  
  <fileset dir="./data/deployment/uploads/avatars" id="uploads_avatars">
    <include name="**" />
  </fileset>
    
  
  <fileset dir="./data/deployment/dev_config" id="dev_config">
    <include name="**" />
  </fileset>

  <fileset dir="./data/deployment/live_config" id="live_config">
    <include name="**" />
  </fileset>

  <target name="copy_factory_config">
    <copy file="data/deployment/factories_${env}.yml" tofile="apps/configurator/config/factories.yml" overwrite="true"></copy>
    <copy file="data/deployment/factories_${env}.yml" tofile="apps/engineroom/config/factories.yml" overwrite="true"></copy>
    <copy file="data/deployment/factories_${env}.yml" tofile="apps/platform/config/factories.yml" overwrite="true"></copy>
    <copy file="data/deployment/factories_${env}.yml" tofile="apps/profile/config/factories.yml" overwrite="true"></copy>
    <copy file="data/deployment/factories_${env}.yml" tofile="apps/shorturl/config/factories.yml" overwrite="true"></copy>
    <copy file="data/deployment/factories_${env}.yml" tofile="apps/widget/config/factories.yml" overwrite="true"></copy>
  </target>




  <target name="buildlocal">
    <copy todir="./web" overwrite="true">
      <fileset refid="frontend_controllers" />
    </copy>

    <copy todir="./config" overwrite="true">
      <fileset refid="local_config" />
    </copy>
     
    
    <phingcall target="copy_factory_config">
      <property name="env" value="local"/>
    </phingcall>

    <exec command="rm -rf lib/model/doctrine/base" />
    <exec command="rm -rf lib/filter/doctrine/base" />
    
    <exec command="rm -rf lib/form/doctrine/base" />
    <exec command="rm -rf cache/*" />
    <exec command="rm -rf web/uploads/*" />

    <copy todir="./web/uploads/avatars">
      <fileset refid="uploads_avatars" />
    </copy>
    <exec command="chmod -R 777 ./web/uploads" />
    
    <exec command="php batch/cleanup/mongoDbDatabaseCleanup.php" checkReturn="true" />
    <exec command="./symfony doctrine:build --all --no-confirmation --and-load" checkReturn="true"/>

    <exec command="php data/fixtures/initializeMongoObjects.php" checkReturn="true"/>

    <phingcall target="I18NSync"></phingcall>
    <phingcall target="buildjs"></phingcall>
    <phingcall target="buildcss"></phingcall>


  </target>
  
  
  
  
  
  
  
  <target name="builddev">    
    <!-- check for db.lock -->
    <if>
      <available file="db.lock" />
      <then>
        <fail message="ERROR: db.lock exists. DON'T DO THIS! You are on the production system AFFEKOPP" />
      </then>
    </if>
    
    <copy todir="./web" overwrite="true">
      <fileset refid="frontend_controllers" />
    </copy>

    <copy todir="./config" overwrite="true">
      <fileset refid="dev_config" />
    </copy>
    
    <phingcall target="copy_factory_config">
      <property name="env" value="dev"/>
    </phingcall>

    <exec command="rm -rf lib/model/doctrine/base" />
    <exec command="rm -rf lib/filter/doctrine/base" />
    <exec command="rm -rf lib/form/doctrine/base" />
    <exec command="rm -rf cache/*" />

    <exec command="php batch/cleanup/mongoDbDatabaseCleanup.php" checkReturn="true" />
    <exec command="./symfony doctrine:build --all --no-confirmation --and-load" checkReturn="true"/>


    <exec command="php data/fixtures/initializeMongoObjects.php" checkReturn="true"/>

    <phingcall target="buildjs"></phingcall>
    <phingcall target="buildcss"></phingcall>
  </target>
  
  
  
  
  
  
  <target name="buildstaging">    
    <!-- check for db.lock -->
    <if>
      <available file="db.lock" />
      <then>
        <fail message="ERROR: db.lock exists. DON'T DO THIS! You are on the production system AFFEKOPP" />
      </then>
    </if>
    
    <copy todir="./web" overwrite="true">
      <fileset refid="frontend_controllers" />
    </copy>

    <copy todir="./config" overwrite="true">
      <fileset refid="live_config" />
    </copy>
    
    <phingcall target="copy_factory_config">
      <property name="env" value="live"/>
    </phingcall>

    <exec command="rm -rf lib/model/doctrine/base" />
    <exec command="rm -rf lib/filter/doctrine/base" />
    <exec command="rm -rf lib/form/doctrine/base" />
    <exec command="rm -rf cache/*" />

    <exec command="./symfony doctrine:build --all-classes" checkReturn="true"/>

    <phingcall target="buildjs"></phingcall>
    <phingcall target="buildcss"></phingcall>
  </target>
  
  
  
  
  
  <target name="buildwidget">
    <input propertyname="env" message="choose the environment (local|dev|live|ci)" promptChar=":" defaultValue="local" />
    <phingcall target="runwidgettasks">
      <property name="env" value="${env}"/>
    </phingcall>
  </target>

  <target name="buildwidget_development">
    <phingcall target="runwidgettasks">
      <property name="env" value="dev"/>
    </phingcall>
  </target>


  <target name="buildwidget_production">
    <phingcall target="runwidgettasks">
      <property name="env" value="live"/>
    </phingcall>
  </target>


  <target name="runwidgettasks">
    <if>
      <equals arg1="${env}" arg2="live"/>
      <then>
        <if>
          <available file="db.lock" />
          <then>
            <fail message="ERROR: db.lock exists. DON'T DO THIS! You are on the production system AFFEKOPP" />
          </then>
        </if>
        <touch file="db.lock" />
      </then>
    </if>

    <copy todir="./web" overwrite="true">
      <fileset refid="widget_controllers" />
    </copy>

    <copy todir="./config" overwrite="true">
      <fileset refid="${env}_config" />
    </copy>
    
    <phingcall target="copy_factory_config">
      <property name="env" value="${env}"/>
    </phingcall>
    
    
    <copy file="data/deployment/widget_${env}_config.inc.php" tofile="web/w/like/inc/config.inc.php" overwrite="true">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    

    <exec command="rm -rf lib/model/doctrine/base" />
    <exec command="rm -rf lib/filter/doctrine/base" />
    <exec command="rm -rf lib/form/doctrine/base" />
    <exec command="rm -rf cache/*" />

    <exec command="./symfony doctrine:build --all-classes" checkReturn="true"/>

    <phingcall target="buildjs"></phingcall>
    <phingcall target="buildcss"></phingcall>

 

  </target>
  
  
  
  
  <target name="I18NSync">
    <exec command="wget http://yiid:affen2010@staging.yiiddev.com/service/i18n.sql" checkReturn="true"/>
    <exec command='mysql -u yiid_i18n -pfdsmolds32dfs yiid_i18n &lt; i18n.sql' checkReturn="true" />
    <exec command="rm ./i18n.sql" />
  </target>

  
  
  
  <target name="buildjs">
    <exec command="php batch/deployment/buildjs.php" checkReturn="true"/>
    <exec command="./symfony cc" />
  </target>

  
  <target name="buildcss">
    <exec command="php batch/deployment/buildCombinedCss.php" checkReturn="true"/>
    <exec command="./symfony cc" />
  </target>















  <target name="s3sync">

    <echo>
    #####################################################################
    ############ this skript will change image paths in your local css files
    ############ you must not commit those changes, it'll fuck up pathes!!!
    #####################################################################
    ############ best executed on dev/live where nothing gets comittet to svn ;)
    #####################################################################
    </echo>
 
 
    <propertyprompt propertyName="env" defaultValue="dev" promptText="Enter Service you want to sync (live|dev)" />

    <propertyprompt propertyName="rev" defaultValue="0123456789" promptText="Enter Release (yyyymmdd)" />

    <if>
      <equals arg1="${env}" arg2="live" />
      <then>
        <if>
          <available file="s3.lock" />
          <then>
            <fail message="ERROR: s3.lock exists. DON'T DO THIS! You are on the production system AFFEKOPP" />
          </then>
        </if>
        <touch file="s3.lock" />

        <property name="bucket" value="live.yiidcdn.com" />
      </then>
      <else>
        <property name="bucket" value="dev.yiidcdn.com" />
      </else>
    </if>


    <exec command="php batch/deployment/replaceCssCdnUrls.php" checkReturn="true"/>


    <exec command="s3cmd --bucket-location=EU -P -r --exclude='*.svn*' --add-header 'Expires: Sat, 08 May 2015 15:22:28 GMT' sync web/css/ s3://${bucket}/${rev}/css/" checkreturn="true" />
    <exec command="s3cmd --bucket-location=EU -P -r --exclude='*.svn*' --add-header 'Expires: Sat, 08 May 2015 15:22:28 GMT' sync web/img/ s3://${bucket}/${rev}/img/" checkreturn="true" />
    <exec command="s3cmd --bucket-location=EU -P -r --exclude='*.svn*' --add-header 'Expires: Sat, 08 May 2015 15:22:28 GMT' sync web/js/100_main/include/ s3://${bucket}/${rev}/js/100_main/include/" checkreturn="true" />


    <exec command="find ./web/js/100_main/include -type f -exec 7z a -tgzip -x\!\*.svn -x\!\*.gz  {}.gz {} \;" checkreturn="true" />
    <exec command="s3cmd --bucket-location=EU -P -r --exclude='*.*' --include '*.gz' --mime-type 'application/javascript' --add-header 'Content-Encoding: gzip' sync web/js/100_main/include/ s3://${bucket}/${rev}/js/100_main/include/" checkreturn="true" />
    <exec command="find ./web/js/100_main/include -name '*.gz' -exec rm {} \;" checkreturn="true" />

    <exec command="find ./web/css -type f -exec 7z a -tgzip  -x\!\*.svn -x\!\*.gz  {}.gz {} \;" checkreturn="true" />
    <exec command="s3cmd --bucket-location=EU -P -r --exclude='*.*' --include '*.gz' --mime-type 'text/css' --add-header 'Content-Encoding: gzip' sync web/css/ s3://${bucket}/${rev}/css/" checkreturn="true" />
    <exec command="find ./web/css -name '*.gz' -exec rm {} \;" checkreturn="true" />
  </target>

</project>